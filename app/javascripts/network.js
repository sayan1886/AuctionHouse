getContractAddress = function(callback) {
    if (typeof web3 !== 'undefined') {
        console.warn("Using web3 detected from external source like Metamask")
            // Use Mist/MetaMask's provider
        window.web3 = new Web3(web3.currentProvider);
    } else {
        console.warn("No web3 detected. Falling back to http://localhost:8545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask");
        // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
        window.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
    }
    console.log(web3.isConnected());
    web3.version.getNetwork(function(error, result) {
        if (error != null) {
            console.log('Unknown network');
            ah_contract_addr = '';
            sn_contract_addr = '';
            error = "Failed to load ethereum network and smart contract";
        } else if (result == "11") {
            ah_contract_addr = '0xff7a3ca14472e9ccd9c5ebaf1b6c6a50a61cc70f';
            sn_contract_addr = '0xc85a233a3c91b199cf02b7740d69f407c96948a0';
        } else {
            ah_contract_addr = '';
            sn_contract_addr = '';
            error("AuctionHouse is not deployed to the main net yet, please try the test net");
        }

        AuctionHouse = web3.eth.contract([{ "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "auctions", "outputs": [{ "name": "seller", "type": "address" }, { "name": "contractAddress", "type": "address" }, { "name": "recordId", "type": "string" }, { "name": "title", "type": "string" }, { "name": "description", "type": "string" }, { "name": "startTimeStamp", "type": "uint256" }, { "name": "expirationTimeStamp", "type": "uint256" }, { "name": "status", "type": "uint8" }, { "name": "startingPrice", "type": "uint256" }, { "name": "reservePrice", "type": "uint256" }, { "name": "currentBid", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "address" }, { "name": "", "type": "uint256" }], "name": "auctionsBidOnByUser", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "address" }, { "name": "", "type": "uint256" }], "name": "auctionsRunByUser", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "id", "type": "uint256" }, { "indexed": false, "name": "title", "type": "string" }, { "indexed": false, "name": "startingPrice", "type": "uint256" }, { "indexed": false, "name": "reservePrice", "type": "uint256" }], "name": "AuctionCreated", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "id", "type": "uint256" }], "name": "AuctionActivated", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "id", "type": "uint256" }], "name": "AuctionCancelled", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "auctionId", "type": "uint256" }, { "indexed": false, "name": "bidder", "type": "address" }, { "indexed": false, "name": "amount", "type": "uint256" }], "name": "BidPlaced", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "auctionId", "type": "uint256" }, { "indexed": false, "name": "winningBidder", "type": "address" }, { "indexed": false, "name": "amount", "type": "uint256" }], "name": "AuctionEndedWithWinner", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "auctionId", "type": "uint256" }, { "indexed": false, "name": "topBid", "type": "uint256" }, { "indexed": false, "name": "reservePrice", "type": "uint256" }], "name": "AuctionEndedWithoutWinner", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "message", "type": "string" }], "name": "LogFailure", "type": "event" }, { "constant": false, "inputs": [{ "name": "_title", "type": "string" }, { "name": "_description", "type": "string" }, { "name": "_contractAddressOfAsset", "type": "address" }, { "name": "_recordIdOfAsset", "type": "string" }, { "name": "_deadline", "type": "uint256" }, { "name": "_startingPrice", "type": "uint256" }, { "name": "_reservePrice", "type": "uint256" }], "name": "createAuction", "outputs": [{ "name": "auctionId", "type": "uint256" }], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": true, "inputs": [{ "name": "idx", "type": "uint256" }], "name": "getAuction", "outputs": [{ "name": "", "type": "address" }, { "name": "", "type": "address" }, { "name": "", "type": "string" }, { "name": "", "type": "string" }, { "name": "", "type": "string" }, { "name": "", "type": "uint256" }, { "name": "", "type": "uint256" }, { "name": "", "type": "uint256" }, { "name": "", "type": "uint256" }, { "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getAuctionCount", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "idx", "type": "uint256" }], "name": "getStatus", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "addr", "type": "address" }], "name": "getAuctionsCountForUser", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "addr", "type": "address" }, { "name": "idx", "type": "uint256" }], "name": "getAuctionIdForUserAndIdx", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_contractRecordConcat", "type": "string" }], "name": "getActiveContractRecordConcat", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "auctionId", "type": "uint256" }], "name": "activateAuction", "outputs": [{ "name": "", "type": "bool" }], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [{ "name": "auctionId", "type": "uint256" }], "name": "cancelAuction", "outputs": [{ "name": "", "type": "bool" }], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [{ "name": "auctionId", "type": "uint256" }], "name": "getBidCountForAuction", "outputs": [{ "name": "", "type": "uint256" }], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": true, "inputs": [{ "name": "auctionId", "type": "uint256" }, { "name": "idx", "type": "uint256" }], "name": "getBidForAuctionByIdx", "outputs": [{ "name": "bidder", "type": "address" }, { "name": "amount", "type": "uint256" }, { "name": "timestamp", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "auctionId", "type": "uint256" }], "name": "placeBid", "outputs": [{ "name": "success", "type": "bool" }], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": true, "inputs": [], "name": "getRefundValue", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "withdrawRefund", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [{ "name": "auctionId", "type": "uint256" }], "name": "endAuction", "outputs": [{ "name": "success", "type": "bool" }], "payable": true, "stateMutability": "payable", "type": "function" }]);
        SampleName = web3.eth.contract([{ "constant": true, "inputs": [{ "name": "_recordId", "type": "string" }], "name": "owner", "outputs": [{ "name": "ownerAddress", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_recordId", "type": "string" }, { "name": "_newOwner", "type": "address" }], "name": "setOwner", "outputs": [{ "name": "success", "type": "bool" }], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_recordId", "type": "string" }, { "name": "_owner", "type": "address" }, { "name": "_name", "type": "string" }, { "name": "_walletAddress", "type": "address" }], "name": "addRecord", "outputs": [{ "name": "sufficient", "type": "bool" }], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_recordId", "type": "string" }], "name": "getWalletAddress", "outputs": [{ "name": "walletAddress", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_recordId", "type": "string" }, { "name": "_newWalletAddress", "type": "address" }], "name": "updateRecordWalletAddress", "outputs": [{ "name": "success", "type": "bool" }], "payable": true, "stateMutability": "payable", "type": "function" }]);
        Asset = web3.eth.contract([{ "constant": true, "inputs": [{ "name": "_recordId", "type": "string" }], "name": "owner", "outputs": [{ "name": "sellerAddress", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_recordId", "type": "string" }, { "name": "_newOwner", "type": "address" }], "name": "setOwner", "outputs": [{ "name": "success", "type": "bool" }], "payable": true, "stateMutability": "payable", "type": "function" }]);

        console.log("network id: " + result);
        console.log("auction house contract addr: " + ah_contract_addr);
        console.log("sample name contract addr: " + sn_contract_addr);

        callback(ah_contract_addr, sn_contract_addr, error);

    });
};